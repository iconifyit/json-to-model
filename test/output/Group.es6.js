/*
 * Copyright (c) 2020.-present Atomic Lotus, LLC - Scott Lewis <scott@atomiclotus.net>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

// ============================================================ //
// This file is auto-generated by JsonToJsModel by @atomiclotus //
// ============================================================ //

((global, module, exports) => {

    const get = (subject, key, fallback) => {
        if (typeof subject[key] !== 'undefined') {
            return subject[key];
        }
        return fallback;
    }

    /**
     * Creates a unique identifier in UUID format.
     */
    const generateUUID = () => {
        let d = new Date().getTime();
        if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
            d += performance.now(); //use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            let r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
    }

    class Group {

        constructor(data) {

            if (! data) data = {};

            this.instance = 'Group@' + generateUUID();

            /**
             * {string}
             */
            this.primaryKey = 'identifier';

            /**
             * {string}
             */
            this.name = get( data, 'name', null );

            /**
             * {number}
             */
            this.sort = get( data, 'sort', null );

            /**
             * {string}
             */
            this.identifier = get( data, 'identifier', generateUUID() );

        }

        /**
         * Gets the value of name
         * @returns {string}
         */
        getName() {
            return this.name;
        }

        /**
         * Gets the value of sort
         * @returns {number}
         */
        getSort() {
            return this.sort;
        }

        /**
         * Gets the value of identifier
         * @returns {string}
         */
        getIdentifier() {
            return this.identifier;
        }


        /**
         * Sets the value of name
         * @param {string} value  The value to set name to.
         * @returns {string}
         */
        setName(value) {
            if (typeof value !== 'string') {
                throw new TypeError('string required. ' + typeof value + ' given');
            }
            this.name = value;
            return this.name;
        }

        /**
         * Sets the value of sort
         * @param {number} value  The value to set sort to.
         * @returns {number}
         */
        setSort(value) {
            if (typeof value !== 'number') {
                throw new TypeError('number required. ' + typeof value + ' given');
            }
            this.sort = value;
            return this.sort;
        }

        /**
         * Sets the value of identifier
         * @param {string} value  The value to set identifier to.
         * @returns {string}
         */
        setIdentifier(value) {
            if (typeof value !== 'string') {
                throw new TypeError('string required. ' + typeof value + ' given');
            }
            this.identifier = value;
            return this.identifier;
        }

        /**
         * Get the {Group} as on object of key => value pairs.
         * @returns {Group[]}
         */
        valueOf() {
            return {
                name : this.getName(),
                sort : this.getSort(),
                identifier : this.getIdentifier(),
            }
        }

        /**
         * Get the {Group} as a JSON object.
         * @returns {string}
         */
        toJSON() {
            return JSON.stringify(this.valueOf());
        }
    }

    /*
     * A ttach to the parent scope.
     */
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Group;
    }
    else if ( typeof exports === 'object' ){
        exports.Group = Group;
    }

})(this, module, exports);