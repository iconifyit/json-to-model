/*
 * Copyright (c) 2020.-present Atomic Lotus, LLC - Scott Lewis <scott@atomiclotus.net>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* ============================================================ *
 * This file is auto-generated by JsonToJsModel by @atomiclotus *
 * ============================================================ */

((global, module, exports) => {

    class Build {

        constructor(data) {

            if (! data) data = {};

            const uniqueId = this.generateUUID();

            this.instance = 'Build@' + uniqueId;

            /**
             * {string}
             */
            this.primaryKey = '';

            /**
             * {string}
             */
            this.version = this._get(data, 'version', null);

            /**
             * {string}
             */
            this.build = this._get(data, 'build', (new Date()).toISOString());

        }

        /**
         * Gets the value of version
         * @returns {string}
         */
        getVersion() {
            return this.version;
        }

        /**
         * Gets the value of build
         * @returns {string}
         */
        getBuild() {
            return this.build;
        }


        /**
         * Sets the value of version
         * @param {string} value  The value to set version to.
         * @returns {string}
         */
        setVersion(value) {
            if (typeof value !== 'string') {
                throw new TypeError('string required. ' + typeof value + ' given');
            }
            this.version = value;
            return this.version;
        }

        /**
         * Sets the value of build
         * @param {string} value  The value to set build to.
         * @returns {string}
         */
        setBuild(value) {
            if (typeof value !== 'string') {
                throw new TypeError('string required. ' + typeof value + ' given');
            }
            this.build = value;
            return this.build;
        }

        /**
         * Gets the value of an object property by name.
         * @param {object}  subject     The object to search.
         * @param {string}  key         The name of the property to get.
         * @param {*}       fallback    The default value to return if key is not found.
         */
        _get(subject, key, fallback) {
            if (typeof subject[key] !== 'undefined') {
                return subject[key];
            }
            return fallback;
        }

        /**
         * Creates a unique identifier in UUID format.
         */
        generateUUID() {
            let d = new Date().getTime();
            if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
                d += performance.now(); //use high-precision timer if available
            }
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
                let r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
        }

        /**
         * Get the {Build} as on object of key => value pairs.
         * @returns {Build[]}
         */
        valueOf() {
            return {
                version : this.getVersion(),
                build : this.getBuild(),
            }
        }

        /**
         * Get the {Build} as a JSON object.
         * @returns {string}
         */
        toJSON() {
            return JSON.stringify(this.valueOf());
        }
    }

    /*
     * A ttach to the parent scope.
     */
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Build;
    }
    else if ( typeof exports === 'object' ){
        exports.Build = Build;
    }

})(this, module, exports);