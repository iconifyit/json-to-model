/*
 * Copyright (c) 2020.-present Atomic Lotus, LLC - Scott Lewis <scott@atomiclotus.net>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* ============================================================ *
 * This file is auto-generated by JsonToJsModel by @atomiclotus *
 * ============================================================ */

(function(global, module, exports) {

    'use strict';

    var Icon = function(data) {

        if (! data) data = {};

        var uniqueId = this._generateUUID();

        this.instance = 'Icon@' + uniqueId;

        /**
         * {string}
         */
        this.primaryKey = 'identifier';

        /**
         * {string}
         */
        this.identifier = this._get(data, 'identifier', uniqueId);
        /**
         * {string}
         */
        this.name = this._get(data, 'name', null);
        /**
         * {string}
         */
        this.tags = this._get(data, 'tags', null);
        /**
         * {string}
         */
        this.file = this._get(data, 'file', null);
        /**
         * {string}
         */
        this.licence = this._get(data, 'licence', null);
        /**
         * {date}
         */
        this.date = this._get(data, 'date', (new Date()).toISOString());
        /**
         * {number}
         */
        this.width = this._get(data, 'width', (new Date()).toISOString());
        /**
         * {number}
         */
        this.height = this._get(data, 'height', (new Date()).toISOString());
        /**
         * {string}
         */
        this.parent = this._get(data, 'parent', null);
        /**
         * {string}
         */
        this.type = this._get(data, 'type', (new Date()).toISOString());
        /**
         * {string}
         */
        this.unicode = this._get(data, 'unicode', null);

    }

    // Getters
    /**
     * Gets the value of identifier
     * @returns {string}
     */
    Icon.prototype.getIdentifier = function() {
        return this.identifier;
    }

    /**
     * Gets the value of name
     * @returns {string}
     */
    Icon.prototype.getName = function() {
        return this.name;
    }

    /**
     * Gets the value of tags
     * @returns {string}
     */
    Icon.prototype.getTags = function() {
        return this.tags;
    }

    /**
     * Gets the value of file
     * @returns {string}
     */
    Icon.prototype.getFile = function() {
        return this.file;
    }

    /**
     * Gets the value of licence
     * @returns {string}
     */
    Icon.prototype.getLicence = function() {
        return this.licence;
    }

    /**
     * Gets the value of date
     * @returns {date}
     */
    Icon.prototype.getDate = function() {
        return this.date;
    }

    /**
     * Gets the value of width
     * @returns {number}
     */
    Icon.prototype.getWidth = function() {
        return this.width;
    }

    /**
     * Gets the value of height
     * @returns {number}
     */
    Icon.prototype.getHeight = function() {
        return this.height;
    }

    /**
     * Gets the value of parent
     * @returns {string}
     */
    Icon.prototype.getParent = function() {
        return this.parent;
    }

    /**
     * Gets the value of type
     * @returns {string}
     */
    Icon.prototype.getType = function() {
        return this.type;
    }

    /**
     * Gets the value of unicode
     * @returns {string}
     */
    Icon.prototype.getUnicode = function() {
        return this.unicode;
    }

    // Setters

    /**
     * Sets the value of identifier
     * @param {string} value  The value to set identifier to.
     * @returns {string}
     */
    Icon.prototype.setIdentifier = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.identifier = value;
        return this.identifier;
    }

    /**
     * Sets the value of name
     * @param {string} value  The value to set name to.
     * @returns {string}
     */
    Icon.prototype.setName = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.name = value;
        return this.name;
    }

    /**
     * Sets the value of tags
     * @param {string} value  The value to set tags to.
     * @returns {string}
     */
    Icon.prototype.setTags = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.tags = value;
        return this.tags;
    }

    /**
     * Sets the value of file
     * @param {string} value  The value to set file to.
     * @returns {string}
     */
    Icon.prototype.setFile = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.file = value;
        return this.file;
    }

    /**
     * Sets the value of licence
     * @param {string} value  The value to set licence to.
     * @returns {string}
     */
    Icon.prototype.setLicence = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.licence = value;
        return this.licence;
    }

    /**
     * Sets the value of date
     * @param {date} value  The value to set date to.
     * @returns {date}
     */
    Icon.prototype.setDate = function(value) {
        if (! value instanceof Date) {
            throw new TypeError('Date required.');
        }
        this.date = value;
        return this.date;
    }

    /**
     * Sets the value of width
     * @param {number} value  The value to set width to.
     * @returns {number}
     */
    Icon.prototype.setWidth = function(value) {
        if (! value instanceof Number) {
            throw new TypeError('Number required.');
        }
        this.width = value;
        return this.width;
    }

    /**
     * Sets the value of height
     * @param {number} value  The value to set height to.
     * @returns {number}
     */
    Icon.prototype.setHeight = function(value) {
        if (! value instanceof Number) {
            throw new TypeError('Number required.');
        }
        this.height = value;
        return this.height;
    }

    /**
     * Sets the value of parent
     * @param {string} value  The value to set parent to.
     * @returns {string}
     */
    Icon.prototype.setParent = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.parent = value;
        return this.parent;
    }

    /**
     * Sets the value of type
     * @param {string} value  The value to set type to.
     * @returns {string}
     */
    Icon.prototype.setType = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.type = value;
        return this.type;
    }

    /**
     * Sets the value of unicode
     * @param {string} value  The value to set unicode to.
     * @returns {string}
     */
    Icon.prototype.setUnicode = function(value) {
        if (! value instanceof String) {
            throw new TypeError('String required.');
        }
        this.unicode = value;
        return this.unicode;
    }

    // Utility functions

    /**
     * Gets the value of an object property by name.
     * @param {object}  subject     The object to search.
     * @param {string}  key         The name of the property to get.
     * @param {*}       fallback    The default value to return if key is not found.
     */
    Icon.prototype._get = function(subject, key, fallback) {
        if (typeof subject[key] !== 'undefined') {
            return subject[key];
        }
        return fallback;
    }

    /**
     * Creates a unique identifier in UUID format.
     */
    Icon.prototype._generateUUID = function() {
        var d = new Date().getTime();
        if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
            d += performance.now(); //use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
    }

    /**
     * Get the {Icon} as on object of key => value pairs.
     * @returns {Icon[]}
     */
    Icon.prototype.valueOf = function() {
        return {
            identifier : this.getIdentifier(),
            name : this.getName(),
            tags : this.getTags(),
            file : this.getFile(),
            licence : this.getLicence(),
            date : this.getDate(),
            width : this.getWidth(),
            height : this.getHeight(),
            parent : this.getParent(),
            type : this.getType(),
            unicode : this.getUnicode(),
        }
    }

    /**
     * Get the {Icon} as a JSON object.
     * @returns {string}
     */
    Icon.prototype.toJSON = function() {
        return JSON.stringify(this.valueOf());
    }

    /*
     * Attach to the parent scope.
     */
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Icon;
    }
    else if ( typeof exports === 'object' ){
        exports.Icon = Icon;
    }

})(this, module, exports);


