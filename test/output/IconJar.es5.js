/*
 * Copyright (c) 2020.-present Atomic Lotus, LLC - Scott Lewis <scott@atomiclotus.net>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* ============================================================ *
 * This file is auto-generated by JsonToJsModel by @atomiclotus *
 * ============================================================ */

(function(global, module, exports) {

    'use strict';

    var IconJar = function(data) {

        if (! data) data = {};

        var uniqueId = this._generateUUID();

        this.instance = 'IconJar@' + uniqueId;

        /**
         * {string}
         */
        this.primaryKey = '';

        /**
         * {object}
         */
        this.meta = this._get(data, 'meta', {});
        /**
         * {object}
         */
        this.sets = this._get(data, 'sets', {});
        /**
         * {object}
         */
        this.licences = this._get(data, 'licences', {});
        /**
         * {object}
         */
        this.groups = this._get(data, 'groups', {});
        /**
         * {object}
         */
        this.items = this._get(data, 'items', {});

    }

    // Getters
    /**
     * Gets the value of meta
     * @returns {object}
     */
    IconJar.prototype.getMeta = function() {
        return this.meta;
    }

    /**
     * Gets the value of sets
     * @returns {object}
     */
    IconJar.prototype.getSets = function() {
        return this.sets;
    }

    /**
     * Gets the value of licences
     * @returns {object}
     */
    IconJar.prototype.getLicences = function() {
        return this.licences;
    }

    /**
     * Gets the value of groups
     * @returns {object}
     */
    IconJar.prototype.getGroups = function() {
        return this.groups;
    }

    /**
     * Gets the value of items
     * @returns {object}
     */
    IconJar.prototype.getItems = function() {
        return this.items;
    }

    // Setters

    /**
     * Sets the value of meta
     * @param {object} value  The value to set meta to.
     * @returns {object}
     */
    IconJar.prototype.setMeta = function(value) {
        if (typeof value !== 'object') {
            throw new TypeError('object required. ' + typeof value + ' given');
        }
        this.meta = value;
        return this.meta;
    }

    /**
     * Sets the value of sets
     * @param {object} value  The value to set sets to.
     * @returns {object}
     */
    IconJar.prototype.setSets = function(value) {
        if (typeof value !== 'object') {
            throw new TypeError('object required. ' + typeof value + ' given');
        }
        this.sets = value;
        return this.sets;
    }

    /**
     * Sets the value of licences
     * @param {object} value  The value to set licences to.
     * @returns {object}
     */
    IconJar.prototype.setLicences = function(value) {
        if (typeof value !== 'object') {
            throw new TypeError('object required. ' + typeof value + ' given');
        }
        this.licences = value;
        return this.licences;
    }

    /**
     * Sets the value of groups
     * @param {object} value  The value to set groups to.
     * @returns {object}
     */
    IconJar.prototype.setGroups = function(value) {
        if (typeof value !== 'object') {
            throw new TypeError('object required. ' + typeof value + ' given');
        }
        this.groups = value;
        return this.groups;
    }

    /**
     * Sets the value of items
     * @param {object} value  The value to set items to.
     * @returns {object}
     */
    IconJar.prototype.setItems = function(value) {
        if (typeof value !== 'object') {
            throw new TypeError('object required. ' + typeof value + ' given');
        }
        this.items = value;
        return this.items;
    }

    // Utility functions

    /**
     * Gets the value of an object property by name.
     * @param {object}  subject     The object to search.
     * @param {string}  key         The name of the property to get.
     * @param {*}       fallback    The default value to return if key is not found.
     */
    IconJar.prototype._get = function(subject, key, fallback) {
        if (typeof subject[key] !== 'undefined') {
            return subject[key];
        }
        return fallback;
    }

    /**
     * Creates a unique identifier in UUID format.
     */
    IconJar.prototype._generateUUID = function() {
        var d = new Date().getTime();
        if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
            d += performance.now(); //use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
    }

    /**
     * Get the {IconJar} as on object of key => value pairs.
     * @returns {IconJar[]}
     */
    IconJar.prototype.valueOf = function() {
        return {
            meta : this.getMeta(),
            sets : this.getSets(),
            licences : this.getLicences(),
            groups : this.getGroups(),
            items : this.getItems(),
        }
    }

    /**
     * Get the {IconJar} as a JSON object.
     * @returns {string}
     */
    IconJar.prototype.toJSON = function() {
        return JSON.stringify(this.valueOf());
    }

    /*
     * Attach to the parent scope.
     */
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = IconJar;
    }
    else if ( typeof exports === 'object' ){
        exports.IconJar = IconJar;
    }

})(this, module, exports);


