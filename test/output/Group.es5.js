/*
 * Copyright (c) 2020.-present Atomic Lotus, LLC - Scott Lewis <scott@atomiclotus.net>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

// ============================================================ //
// This file is auto-generated by JsonToJsModel by @atomiclotus //
// ============================================================ //

(function(global, module, exports) {

    'use strict';

    var Group = function(data) {

        if (! data) data = {};

        this.instance = 'Group@' + this._generateUUID();

        /**
         * {string}
         */
        this.primaryKey = 'identifier';

        /**
         * {string}
         */
        this.name = this._get( data, 'name', null );
        /**
         * {number}
         */
        this.sort = this._get( data, 'sort', null );
        /**
         * {string}
         */
        this.identifier = this._get( data, 'identifier', this._generateUUID() );

    }

    // Getters
    /**
     * Gets the value of name
     * @returns {string}
     */
    Group.prototype.getName = function() {
        return this.name;
    }

    /**
     * Gets the value of sort
     * @returns {number}
     */
    Group.prototype.getSort = function() {
        return this.sort;
    }

    /**
     * Gets the value of identifier
     * @returns {string}
     */
    Group.prototype.getIdentifier = function() {
        return this.identifier;
    }

    // Setters

    /**
     * Sets the value of name
     * @param {string} value  The value to set name to.
     * @returns {string}
     */
    Group.prototype.setName = function(value) {
        if (typeof value !== 'string') {
            throw new TypeError('string required. ' + typeof value + ' given');
        }
        this.name = value;
        return this.name;
    }

    /**
     * Sets the value of sort
     * @param {number} value  The value to set sort to.
     * @returns {number}
     */
    Group.prototype.setSort = function(value) {
        if (typeof value !== 'number') {
            throw new TypeError('number required. ' + typeof value + ' given');
        }
        this.sort = value;
        return this.sort;
    }

    /**
     * Sets the value of identifier
     * @param {string} value  The value to set identifier to.
     * @returns {string}
     */
    Group.prototype.setIdentifier = function(value) {
        if (typeof value !== 'string') {
            throw new TypeError('string required. ' + typeof value + ' given');
        }
        this.identifier = value;
        return this.identifier;
    }

    // Utility functions

    /**
     * Gets the value of an object property by name.
     * @param {object}  subject     The object to search.
     * @param {string}  key         The name of the property to get.
     * @param {*}       fallback    The default value to return if key is not found.
     */
    Group.prototype._get = function(subject, key, fallback) {
        if (typeof subject[key] !== 'undefined') {
            return subject[key];
        }
        return fallback;
    }

    /**
     * Creates a unique identifier in UUID format.
     */
    Group.prototype._generateUUID = function() {
        var d = new Date().getTime();
        if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
            d += performance.now(); //use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
    }

    /**
     * Get the {Group} as on object of key => value pairs.
     * @returns {Group[]}
     */
    Group.prototype.valueOf = function() {
        return {
            name : this.getName(),
            sort : this.getSort(),
            identifier : this.getIdentifier(),
        }
    }

    /**
     * Get the {Group} as a JSON object.
     * @returns {string}
     */
    Group.prototype.toJSON = function() {
        return JSON.stringify(this.valueOf());
    }

    /*
     * Attach to the parent scope.
     */
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Group;
    }
    else if ( typeof exports === 'object' ){
        exports.Group = Group;
    }

})(this, module, exports);


