/*
 * Copyright (c) 2020.-present Atomic Lotus, LLC - Scott Lewis (scott@atomiclotus.net)
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* ============================================================ *
 * This file is auto-generated by JsonToJsModel by @atomiclotus *
 * ============================================================ */

((global, module, exports) => {

    class {{ClassName}} {

        constructor(data) {

            if (! data) data = {};

            const uniqueId = this.generateUUID();

            this.instance = '{{ClassName}}@' + uniqueId;

            this.__keyMap = {{{keyMap}}};

            /**
             * {string}
             */
            this.primaryKey = '{{primaryKey}}';

        {{#each properties}}
            /**
             * {{#bracket}}{{#if isTypedArray}}{{singleType}}[]{{else}}{{returnType}}{{/if}}{{/bracket}}
             */
            this.{{name}} = this._get(data, '{{jsonKey}}', {{#if primary}}uniqueId{{else}}{{defaultValue}}{{/if}});

        {{/each}}
        
        {{#each getters}}
            this.{{getter}} = this.{{getter}}.bind(this);
        {{/each}}
        }

        {{#each getters}}
        /**
         * Gets the value of {{name}}
         * @returns {{#bracket}}{{#if isTypedArray}}{{singleType}}[]{{else}}{{returnType}}{{/if}}{{/bracket}}
         */
        {{getter}}() {
            return this.{{name}};
        }

        {{/each}}

        {{#each setters}}
        /**
         * Sets the value of {{name}}
         * @param {{#bracket}}{{returnType}}{{/bracket}} value  The value to set {{name}} to.
         * @returns {{#bracket}}{{#if isTypedArray}}{{singleType}}[]{{else}}{{type}}{{/if}}{{/bracket}}
         */
        {{setter}}(value) {
            if (! value instanceof {{ucWords returnType}}) {
                throw new TypeError('{{ClassName}}.{{setter}}() requires a {{ucWords returnType}}.');
            }
            this.{{name}} = value;
            return this.{{name}};
        }

        {{/each}}
        // Adders
        {{#each adders}}

        /**
         * Adds a {{name}}
         * @param {{#bracket}}{{returnType}}{{/bracket}} value  The value to add to {{name}}.
         * @returns {{#bracket}}{{#if isTypedArray}}{{singleType}}[]{{else}}{{type}}{{/if}}{{/bracket}}
         */
        {{method}}(value) {
            if (! value instanceof {{#if isTypedArray}}{{ucWords singleType}}{{else}}{{ucWords returnType}}{{/if}}) {
                throw new TypeError('{{ClassName}}.{{method}}() requires a {{#if isTypedArray}}{{ucWords singleType}}{{else}}{{ucWords returnType}}{{/if}}.');
            }
            if (this.{{name}} instanceof Array && this.{{name}}.indexOf(value) === -1) {
                this.{{name}}.push(value);
            }
            return this.{{name}};
        }
        {{/each}}
        // removers
        {{#each removers}}

        /**
         * Removes a {{name}}
         * @param {{#bracket}}{{returnType}}{{/bracket}} value  The item to remove from {{name}}.
         * @returns {{#bracket}}{{#if isTypedArray}}{{singleType}}[]{{else}}{{type}}{{/if}}{{/bracket}}
         */
        {{method}}(value) {
            if (this.{{name}} instanceof Array && this.{{name}}.indexOf(value) >= 0) {
                var filtered = [];
                this.{{name}}.map(function(item) {
                    if (item === value) return;
                    tmp.push(item);
                });
                this.{{name}} = filtered;
            }
            return this.{{name}};
        }
        {{/each}}
        // Has-sers
        {{#each hassers}}

        /**
         * Checks to see if `value` exists in {{name}}
         * @param {{#bracket}}{{returnType}}{{/bracket}} value  The value to check {{name}} for.
         * @returns {boolean}
         */
        {{method}}(value) {
            return ( this.{{name}} instanceof Array && this.{{name}}.indexOf(value) >= 0 );
        }
        {{/each}}

        /**
         * Gets the value of an object property by name.
         * @param {object}  subject     The object to search.
         * @param {string}  key         The name of the property to get.
         * @param {*}       fallback    The default value to return if key is not found.
         */
        _get(subject, key, fallback) {
            if (typeof subject[key] !== 'undefined') {
                return subject[key];
            }
            return fallback;
        }

        /**
         * Creates a unique identifier in UUID format.
         */
        generateUUID() {
            let d = new Date().getTime();
            if (typeof performance !== 'undefined' && typeof performance.now === 'function'){
                d += performance.now(); //use high-precision timer if available
            }
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
                let r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
        }

        /**
         * Get the {{#bracket}}{{ClassName}}{{/bracket}} as on object of key => value pairs.
         * @returns {{#bracket}}{{ClassName}}[]{{/bracket}}
         */
        valueOf() {
            return {
            {{#each getters}}
                {{name}} : this.{{getter}}(),
            {{/each}}
            }
        }

        /**
         * Get the {{#bracket}}{{ClassName}}{{/bracket}} as a JSON object.
         * @returns {string}
         */
        toJSON(preserveOriginalKeys) {
            if (! preserveOriginalKeys) {
                return JSON.stringify(this.valueOf());
            }
            let value = this.valueOf();
            let json = {};
            for (let key in value) {
                if (typeof this.__keyMap[key] !== 'undefined') {
                    json[this.__keyMap[key]] = value[key];
                }
            }
            return json;
        }
    }

    /*
     * A ttach to the parent scope.
     */
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = {{ClassName}};
    }
    else if ( typeof exports === 'object' ){
        exports.{{ClassName}} = {{ClassName}};
    }

})(this, module, exports);